// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2022 All Rights Reserved
// </copyright>
// <author></author>
// <date>1/24/2022 10:35:46 AM</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Microsoft.Xrm.Sdk;
using SelfContainedSolutionTest.Plugins.Base;
using SelfContainedSolutionTest.Plugins.EarlyBound;
using System;
using System.Diagnostics.CodeAnalysis;
using System.ServiceModel;

namespace SelfContainedSolutionTest.Plugins.Base
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// Plugin development guide: https://docs.microsoft.com/powerapps/developer/common-data-service/plug-ins
    /// Best practices and guidance: https://docs.microsoft.com/powerapps/developer/common-data-service/best-practices/business-logic/
    /// </summary>    
    public abstract class PluginBase : IPlugin
    {
        private LocalPluginContext _localPluginContext;
        private IEarlyBoundContext _earlyBoundContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginBase"/> class.
        /// </summary>
        /// <param name="pluginClassName">The <see cref=" cred="Type"/> of the derived class.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "PluginBase")]
        internal PluginBase(Type pluginClassName)
        {
            PluginClassName = pluginClassName.ToString();
        }

        public PluginBase(Type pluginClassName, IEarlyBoundContext earlyBoundContext)
        {
            PluginClassName = pluginClassName.ToString();
            _earlyBoundContext = earlyBoundContext;
        }

        /// <summary>
        /// Gets or sets the name of the plugin class.
        /// </summary>
        /// <value>The name of the child class.</value>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "PluginBase")]
        protected string PluginClassName { get; private set; }
        internal IEarlyBoundContext EarlyBoundContext { get => _earlyBoundContext; }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "Execute")]
        public void Execute(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new InvalidPluginExecutionException("serviceProvider");
            }

            // Construct the local plug-in context.
            _localPluginContext = new LocalPluginContext(serviceProvider);

            _earlyBoundContext = _earlyBoundContext ?? new EarlyBoundContext(_localPluginContext.CurrentUserService);

            _localPluginContext.Trace($"Entered {PluginClassName}.Execute() " +
                 $"Correlation Id: {_localPluginContext.PluginExecutionContext.CorrelationId}, " +
                 $"Initiating User: {_localPluginContext.PluginExecutionContext.InitiatingUserId}");

            try
            {
                // Invoke the custom implementation 
                Execute(_localPluginContext);

                // now exit - if the derived plug-in has incorrectly registered overlapping event registrations,
                // guard against multiple executions.
                return;
            }
            catch (FaultException<OrganizationServiceFault> orgServiceFault)
            {
                _localPluginContext.Trace($"Exception: {orgServiceFault.ToString()}");

                // Handle the exception.
                throw new InvalidPluginExecutionException($"OrganizationServiceFault: {orgServiceFault.Message}", orgServiceFault);
            }
            finally
            {
                _localPluginContext.Trace($"Exiting {PluginClassName}.Execute()");
            }
        }
        /// <summary>
        /// Placeholder for a custom plug-in implementation. 
        /// </summary>
        /// <param name="localPluginContext">Context for the current plug-in.</param>
        protected virtual void Execute(ILocalPluginContext localPluginContext)
        {
            // Do nothing. 
        }

        public static void ThrowExceptionIfLocalContextIsNullAndObtainTracingService(ILocalPluginContext localContext, out ITracingService tracingService)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }
            // Obtain the tracing service
            tracingService = localContext.TracingService;
        }

        public static void TraceAndThrow(ITracingService tracingService, Exception ex, string pluginName)
        {
            tracingService?.Trace($"An error occurred executing Plugin {pluginName} : {ex}");
            throw new InvalidPluginExecutionException($"An error occurred executing Plugin {pluginName}.", ex);
        }

        internal void Execute(Action action)//, ILocalPluginContext localContext, out ITracingService tracingService)
        {
            if (_localPluginContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(_localPluginContext));
            }

            try
            {
                action();
            }
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                _localPluginContext.Trace($"An error occurred executing Plugin {PluginClassName} : {ex}");
                throw new InvalidPluginExecutionException($"An error occurred executing Plugin {PluginClassName}.", ex);
            }
        }
    }
}